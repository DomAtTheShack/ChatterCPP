//// Created by dominichann on 8/28/24.//#include <cstring>#include <iostream>#include <netinet/in.h>#include <sys/socket.h>#include <unistd.h>#include <atomic>#include <thread>#include "../Packet.h"#define PORT 8085sockaddr_in initClientSocket();void checkForIncomingPackets();std::atomic<bool> running(true); // A flag to control the running state of the programint clientSocket;int main() {    sockaddr_in serverAddress = initClientSocket();    int clientSocket = socket(AF_INET, SOCK_STREAM, 0);  // Create a socket    if (connect(clientSocket, (struct sockaddr*)&serverAddress, sizeof(serverAddress)) != 0) {        std::cerr << "Bad network connection to server!" << std::endl;        return -1;    }    std::string user = "user"; // Example user    std::string message;    std::cout << "Enter your username: ";    getline(std::cin, user);    std::cout << "\n";    // Clear any leftover characters in the input buffer    std::cin.clear();    std::cin.sync();    // Start the thread to check for incoming packets    std::thread receiverThread(checkForIncomingPackets);    // Main thread handles sending messages    while (running) {        std::cout << "Enter your message: ";        getline(std::cin, message);        std::cout << "\n";        // Clear any leftover characters in the input buffer        std::cin.clear();        std::cin.sync();        auto* pkt = new Packet(user, message);        if (Packet::sendPacket(*pkt, &clientSocket) != 0) {            std::cout << "Message sent" << '\n';        } else {            std::cout << "Message not sent" << '\n';        }        delete pkt;    }    // Stop the receiver thread (this won't be reached in this example)    running = false;    receiverThread.join();    close(clientSocket);  // Close the socket only when done    return 0;}sockaddr_in initClientSocket(){    clientSocket = socket(AF_INET, SOCK_STREAM, 0);    sockaddr_in serverAddress;    serverAddress.sin_family = AF_INET;    serverAddress.sin_port = htons(PORT);    serverAddress.sin_addr.s_addr = INADDR_ANY;    return serverAddress;}void checkForIncomingPackets() {    Packet pkt;    while (running) {        // Check if a new packet is available and receive it        if (pkt.checkAndReceivePacket(&clientSocket)) {            std::cout << "New message received: ID=" << pkt.getID()                      << ", User=" << pkt.getUsr()                      << ", Msg=" << pkt.getMsg() << '\n';        }        // Sleep for 1 second        std::this_thread::sleep_for(std::chrono::seconds(1));    }}